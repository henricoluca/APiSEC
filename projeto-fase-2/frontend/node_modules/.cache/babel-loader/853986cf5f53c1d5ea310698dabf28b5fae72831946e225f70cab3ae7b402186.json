{"ast":null,"code":"import config from './config.js';\nimport https from 'https';\nasync function getAccessToken() {\n  // Função para gerar o token de acesso\n  try {\n    const response = await fetch(config.authUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: new URLSearchParams({\n        grant_type: 'password',\n        client_id: config.clientId,\n        client_secret: config.clientSecret,\n        username: config.username,\n        password: config.password\n      }),\n      agent: new https.Agent({\n        rejectUnauthorized: false\n      }) // Ignora a verificação do certificado\n    });\n\n    if (!response.ok) {\n      throw new Error('Erro ao obter o token.');\n    }\n    const responseBody = await response.json();\n    const token = responseBody.access_token;\n    console.log(responseBody);\n    return token; // Retorna o token de acesso\n  } catch (err) {\n    console.error(err);\n    throw new Error('Erro ao obter o token de acesso.');\n  }\n}\nexport default getAccessToken;","map":{"version":3,"names":["config","https","getAccessToken","response","fetch","authUrl","method","headers","body","URLSearchParams","grant_type","client_id","clientId","client_secret","clientSecret","username","password","agent","Agent","rejectUnauthorized","ok","Error","responseBody","json","token","access_token","console","log","err","error"],"sources":["/home/hluca/Projeto Fase 2/frutas-app/src/function/oauth.js"],"sourcesContent":["import config from './config.js';\nimport https from 'https';\n\nasync function getAccessToken() {  // Função para gerar o token de acesso\n  try {\n    const response = await fetch(config.authUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: new URLSearchParams({\n        grant_type: 'password', \n        client_id: config.clientId,\n        client_secret: config.clientSecret,\n        username: config.username,\n        password: config.password\n      }),\n      agent: new https.Agent({ rejectUnauthorized: false }) // Ignora a verificação do certificado\n    });\n\n    if (!response.ok) {\n      throw new Error('Erro ao obter o token.');\n    }\n\n    const responseBody = await response.json();\n    const token = responseBody.access_token;\n    console.log(responseBody);\n\n    return token; // Retorna o token de acesso\n  } catch (err) {\n    console.error(err);\n    throw new Error('Erro ao obter o token de acesso.');\n  }\n}\n\n\nexport default getAccessToken;\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,aAAa;AAChC,OAAOC,KAAK,MAAM,OAAO;AAEzB,eAAeC,cAAcA,CAAA,EAAG;EAAG;EACjC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,MAAM,CAACK,OAAO,EAAE;MAC3CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAE,IAAIC,eAAe,CAAC;QACxBC,UAAU,EAAE,UAAU;QACtBC,SAAS,EAAEX,MAAM,CAACY,QAAQ;QAC1BC,aAAa,EAAEb,MAAM,CAACc,YAAY;QAClCC,QAAQ,EAAEf,MAAM,CAACe,QAAQ;QACzBC,QAAQ,EAAEhB,MAAM,CAACgB;MACnB,CAAC,CAAC;MACFC,KAAK,EAAE,IAAIhB,KAAK,CAACiB,KAAK,CAAC;QAAEC,kBAAkB,EAAE;MAAM,CAAC,CAAC,CAAC;IACxD,CAAC,CAAC;;IAEF,IAAI,CAAChB,QAAQ,CAACiB,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IAEA,MAAMC,YAAY,GAAG,MAAMnB,QAAQ,CAACoB,IAAI,CAAC,CAAC;IAC1C,MAAMC,KAAK,GAAGF,YAAY,CAACG,YAAY;IACvCC,OAAO,CAACC,GAAG,CAACL,YAAY,CAAC;IAEzB,OAAOE,KAAK,CAAC,CAAC;EAChB,CAAC,CAAC,OAAOI,GAAG,EAAE;IACZF,OAAO,CAACG,KAAK,CAACD,GAAG,CAAC;IAClB,MAAM,IAAIP,KAAK,CAAC,kCAAkC,CAAC;EACrD;AACF;AAGA,eAAenB,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}