{"ast":null,"code":"import config from './config.js';\nasync function getAccessToken(username, password) {\n  // Função para gerar o token de acesso\n  try {\n    process.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\";\n    const response = await fetch(config.authUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: new URLSearchParams({\n        grant_type: 'password',\n        client_id: config.clientId,\n        client_secret: config.clientSecret,\n        username: username,\n        password: password\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Erro ao obter o token.');\n    }\n    const responseBody = await response.json();\n    const token = responseBody.access_token;\n    console.log(responseBody);\n    localStorage.setItem('token', token);\n    return token; // Retorna o token de acesso\n  } catch (err) {\n    console.error(err);\n    throw new Error('Erro ao obter o token de acesso.');\n  }\n}\nexport default getAccessToken;","map":{"version":3,"names":["config","getAccessToken","username","password","process","env","NODE_TLS_REJECT_UNAUTHORIZED","response","fetch","authUrl","method","headers","body","URLSearchParams","grant_type","client_id","clientId","client_secret","clientSecret","ok","Error","responseBody","json","token","access_token","console","log","localStorage","setItem","err","error"],"sources":["/home/hluca/projeto-fase-2/frontend/src/function/oauth.js"],"sourcesContent":["import config from './config.js';\n\nasync function getAccessToken(username, password) {  // Função para gerar o token de acesso\n  try {\n    process.env.NODE_TLS_REJECT_UNAUTHORIZED=\"0\"\n    const response = await fetch(config.authUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: new URLSearchParams({\n        grant_type: 'password', \n        client_id: config.clientId,\n        client_secret: config.clientSecret,\n        username: username,\n        password: password\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Erro ao obter o token.');\n    }\n\n    const responseBody = await response.json();\n    const token = responseBody.access_token;\n    console.log(responseBody);\n    \n    localStorage.setItem('token', token);\n    return token; // Retorna o token de acesso\n  } catch (err) {\n    console.error(err);\n    throw new Error('Erro ao obter o token de acesso.');\n  }\n}\n\n\nexport default getAccessToken;\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,aAAa;AAEhC,eAAeC,cAAcA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;EAAG;EACnD,IAAI;IACFC,OAAO,CAACC,GAAG,CAACC,4BAA4B,GAAC,GAAG;IAC5C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACR,MAAM,CAACS,OAAO,EAAE;MAC3CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAE,IAAIC,eAAe,CAAC;QACxBC,UAAU,EAAE,UAAU;QACtBC,SAAS,EAAEf,MAAM,CAACgB,QAAQ;QAC1BC,aAAa,EAAEjB,MAAM,CAACkB,YAAY;QAClChB,QAAQ,EAAEA,QAAQ;QAClBC,QAAQ,EAAEA;MACZ,CAAC;IACH,CAAC,CAAC;IAEF,IAAI,CAACI,QAAQ,CAACY,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IAEA,MAAMC,YAAY,GAAG,MAAMd,QAAQ,CAACe,IAAI,CAAC,CAAC;IAC1C,MAAMC,KAAK,GAAGF,YAAY,CAACG,YAAY;IACvCC,OAAO,CAACC,GAAG,CAACL,YAAY,CAAC;IAEzBM,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,KAAK,CAAC;IACpC,OAAOA,KAAK,CAAC,CAAC;EAChB,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZJ,OAAO,CAACK,KAAK,CAACD,GAAG,CAAC;IAClB,MAAM,IAAIT,KAAK,CAAC,kCAAkC,CAAC;EACrD;AACF;AAGA,eAAenB,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}